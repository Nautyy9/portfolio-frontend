/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 static/wizards_room/flying_carpet/scene.gltf -o Carpet.tsx -t -r public
Author: Elin (https://sketchfab.com/ElinHohler)
License: CC-BY-NC-4.0 (http://creativecommons.org/licenses/by-nc/4.0/)
Source: https://sketchfab.com/3d-models/flying-carpet-2be3311db3724f268179e9cf696df743
Title: Flying Carpet
*/

import * as THREE from "three";
import React, { useEffect, useRef } from "react";
import { useGLTF, useAnimations, useScroll } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useGSAP } from "@gsap/react";
import gsap from "gsap";
import { useFrame } from "@react-three/fiber";
import { ScrollTrigger } from "gsap/all";
type GLTFResult = GLTF & {
  nodes: {
    Object_7: THREE.SkinnedMesh;
    Object_9: THREE.SkinnedMesh;
    GLTF_created_0_rootJoint: THREE.Bone;
  };
  materials: {
    Carpet: THREE.MeshStandardMaterial;
    Tassels: THREE.MeshStandardMaterial;
  };
};

type ActionName = "Action";
type GLTFActions = Record<ActionName, THREE.AnimationAction>;

function Carpet(props: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group | null>(null);
  const { nodes, materials, animations } = useGLTF(
    "/static/wizards_room/flying_carpet/scene.gltf"
  ) as GLTFResult;
  const { actions } = useAnimations<THREE.AnimationClip>(animations, group);
  const tl = useRef<GSAPTimeline | null>(null);
  const fadeIn = useRef<GSAPTimeline | null>(null);
  fadeIn.current = gsap.timeline();
  const scroll = useScroll();
  useEffect(() => {
    actions["Action"]?.reset().setDuration(10).fadeIn(0.5).play();

    return () => {
      actions["Action"]?.fadeOut(0.5).stop();
    };
  }, [group]);

  useGSAP(
    () => {
      if (group.current && fadeIn.current) {
        fadeIn.current.from(
          group.current?.position,
          {
            x: -70,
            duration: 5,
            ease: "power4.out",
            overwrite: "auto",
          },
          0
        );
      }
    },
    { scope: group, revertOnUpdate: true }
  );

  useGSAP(
    () => {
      tl.current = gsap.timeline();
      if (tl.current && group.current) {
        tl.current
          .to(group.current?.position, {
            y: -17,
            duration: 1,
            overwrite: "auto",
            ease: "power1.in",
          })
          .to(
            group.current?.position,
            {
              x: -70,
              y: -13,
              duration: 1,
              overwrite: "auto",
              ease: "power1.in",
            },
            "+=1"
          );
      }
    },
    { scope: group, dependencies: [scroll.offset], revertOnUpdate: true }
  );

  useFrame((state, delta) => {
    if (tl.current) {
      // console.log(scroll.offset * tl.current.duration() * 30);
      tl.current.seek(scroll.offset * tl.current.duration() * 10);
    }
  });
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]}>
          <group name="root">
            <group name="GLTF_SceneRootNode" rotation={[Math.PI / 2, 0, 0]}>
              <group name="Armature_39">
                <group name="GLTF_created_0">
                  <primitive object={nodes.GLTF_created_0_rootJoint} />
                  <group name="Carpet_37" />
                  <group name="Sphere001_38" />
                  <skinnedMesh
                    name="Object_7"
                    geometry={nodes.Object_7.geometry}
                    material={materials.Carpet}
                    skeleton={nodes.Object_7.skeleton}
                  />
                  <skinnedMesh
                    name="Object_9"
                    geometry={nodes.Object_9.geometry}
                    material={materials.Tassels}
                    skeleton={nodes.Object_9.skeleton}
                  />
                </group>
              </group>
            </group>
          </group>
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/static/wizards_room/flying_carpet/scene.gltf");
export default Carpet;
